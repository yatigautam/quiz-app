{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yati\\\\OneDrive\\\\Documents\\\\quiz_app\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Timer from '../components/Timer';\nimport Scoreboard from '../components/Scoreboard';\nimport questions from '../components/questions';\nimport '../components/QuizPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const [showInstructions, setShowInstructions] = useState(true);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(30); // Initial time\n\n  // ✅ Fix: Only start timer when quiz is active\n  useEffect(() => {\n    if (showInstructions || quizCompleted) return; // Do nothing if instructions or quiz is completed\n\n    const timer = setInterval(() => {\n      setTimeLeft(prevTime => {\n        if (prevTime === 1) {\n          clearInterval(timer);\n          nextQuestion(); // Move to the next question when time is up\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer); // ✅ Cleanup timer to avoid memory leaks\n  }, [showInstructions, quizCompleted, currentQuestionIndex]); // ✅ Dependencies updated\n\n  const handleStartQuiz = () => {\n    setShowInstructions(false);\n    setCurrentQuestionIndex(0);\n    setTimeLeft(30); // ✅ Reset timer on quiz start\n  };\n  const handleAnswerSelect = answer => {\n    setUserAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [currentQuestionIndex]: answer\n    }));\n    if (questions[currentQuestionIndex].answer === answer) {\n      setScore(prevScore => prevScore + 1);\n    }\n    nextQuestion();\n  };\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setTimeLeft(30); // ✅ Reset timer for next question\n    } else {\n      setQuizCompleted(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: showInstructions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Instructions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"For multiple-choice questions, select the one best answer (A, B, C, or D).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"For integer-type questions, write your numerical answer clearly.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"No calculators unless specified.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"You have 30 minutes to complete this quiz.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartQuiz,\n        children: \"Start Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) : quizCompleted ? /*#__PURE__*/_jsxDEV(Scoreboard, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Question \", currentQuestionIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: questions[currentQuestionIndex].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), questions[currentQuestionIndex].options ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleAnswerSelect(option),\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: e => setUserAnswers({\n          ...userAnswers,\n          [currentQuestionIndex]: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        timeLeft: timeLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizPage, \"OoMMNkhDEkYghdG6yXHBA4KUJKM=\");\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","Timer","Scoreboard","questions","jsxDEV","_jsxDEV","QuizPage","_s","showInstructions","setShowInstructions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","quizCompleted","setQuizCompleted","score","setScore","timeLeft","setTimeLeft","timer","setInterval","prevTime","clearInterval","nextQuestion","handleStartQuiz","handleAnswerSelect","answer","prevAnswers","prevScore","length","prevIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","question","options","map","option","index","type","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/yati/OneDrive/Documents/quiz_app/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Timer from '../components/Timer';\r\nimport Scoreboard from '../components/Scoreboard';\r\nimport questions from '../components/questions';\r\nimport '../components/QuizPage.css';\r\n\r\nconst QuizPage = () => {\r\n    const [showInstructions, setShowInstructions] = useState(true);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [quizCompleted, setQuizCompleted] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [timeLeft, setTimeLeft] = useState(30); // Initial time\r\n\r\n    // ✅ Fix: Only start timer when quiz is active\r\n    useEffect(() => {\r\n        if (showInstructions || quizCompleted) return; // Do nothing if instructions or quiz is completed\r\n\r\n        const timer = setInterval(() => {\r\n            setTimeLeft((prevTime) => {\r\n                if (prevTime === 1) {\r\n                    clearInterval(timer);\r\n                    nextQuestion(); // Move to the next question when time is up\r\n                    return 0;\r\n                }\r\n                return prevTime - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer); // ✅ Cleanup timer to avoid memory leaks\r\n    }, [showInstructions, quizCompleted, currentQuestionIndex]); // ✅ Dependencies updated\r\n\r\n    const handleStartQuiz = () => {\r\n        setShowInstructions(false);\r\n        setCurrentQuestionIndex(0);\r\n        setTimeLeft(30); // ✅ Reset timer on quiz start\r\n    };\r\n\r\n    const handleAnswerSelect = (answer) => {\r\n        setUserAnswers((prevAnswers) => ({\r\n            ...prevAnswers,\r\n            [currentQuestionIndex]: answer\r\n        }));\r\n\r\n        if (questions[currentQuestionIndex].answer === answer) {\r\n            setScore((prevScore) => prevScore + 1);\r\n        }\r\n\r\n        nextQuestion();\r\n    };\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n            setTimeLeft(30); // ✅ Reset timer for next question\r\n        } else {\r\n            setQuizCompleted(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            {showInstructions ? (\r\n                <div className=\"instructions\">\r\n                    <h2>Instructions</h2>\r\n                    <ul>\r\n                        <li>For multiple-choice questions, select the one best answer (A, B, C, or D).</li>\r\n                        <li>For integer-type questions, write your numerical answer clearly.</li>\r\n                        <li>No calculators unless specified.</li>\r\n                        <li>You have 30 minutes to complete this quiz.</li>\r\n                    </ul>\r\n                    <button onClick={handleStartQuiz}>Start Quiz</button>\r\n                </div>\r\n            ) : quizCompleted ? (\r\n                <Scoreboard score={score} />\r\n            ) : (\r\n                <div className=\"question-section\">\r\n                    <h3>Question {currentQuestionIndex + 1}</h3>\r\n                    <p>{questions[currentQuestionIndex].question}</p>\r\n                    {questions[currentQuestionIndex].options ? (\r\n                        <ul>\r\n                            {questions[currentQuestionIndex].options.map((option, index) => (\r\n                                <li key={index} onClick={() => handleAnswerSelect(option)}>\r\n                                    {option}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <input\r\n                            type=\"number\"\r\n                            onChange={(e) => setUserAnswers({ ...userAnswers, [currentQuestionIndex]: e.target.value })}\r\n                        />\r\n                    )}\r\n                    <Timer timeLeft={timeLeft} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}