{"ast":null,"code":"const DB_NAME = \"QuizDatabase\";\nconst STORE_NAME = \"quizHistory\";\nconst DB_VERSION = 1;\n\n// Open (or create) the IndexedDB database\nconst openDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\",\n          autoIncrement: true\n        });\n      }\n    };\n    request.onsuccess = event => resolve(event.target.result);\n    request.onerror = event => reject(event.target.error);\n  });\n};\n\n// Save a quiz attempt in IndexedDB\nexport const saveQuizAttempt = async score => {\n  const db = await openDB();\n  const transaction = db.transaction(STORE_NAME, \"readwrite\");\n  const store = transaction.objectStore(STORE_NAME);\n  const newAttempt = {\n    date: new Date().toLocaleString(),\n    score: score\n  };\n  store.add(newAttempt);\n  return new Promise((resolve, reject) => {\n    transaction.oncomplete = () => resolve(\"Quiz attempt saved.\");\n    transaction.onerror = event => reject(event.target.error);\n  });\n};\n\n// Fetch all quiz attempts from IndexedDB\nexport const getQuizHistory = async () => {\n  const db = await openDB();\n  const transaction = db.transaction(STORE_NAME, \"readonly\");\n  const store = transaction.objectStore(STORE_NAME);\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = event => reject(event.target.error);\n  });\n};","map":{"version":3,"names":["DB_NAME","STORE_NAME","DB_VERSION","openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","onerror","error","saveQuizAttempt","score","transaction","store","objectStore","newAttempt","date","Date","toLocaleString","add","oncomplete","getQuizHistory","getAll"],"sources":["C:/Users/yati/OneDrive/Documents/quiz_app/src/utils/IndexedDB.js"],"sourcesContent":["const DB_NAME = \"QuizDatabase\";\r\nconst STORE_NAME = \"quizHistory\";\r\nconst DB_VERSION = 1;\r\n\r\n// Open (or create) the IndexedDB database\r\nconst openDB = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\", autoIncrement: true });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event) => resolve(event.target.result);\r\n    request.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n\r\n// Save a quiz attempt in IndexedDB\r\nexport const saveQuizAttempt = async (score) => {\r\n  const db = await openDB();\r\n  const transaction = db.transaction(STORE_NAME, \"readwrite\");\r\n  const store = transaction.objectStore(STORE_NAME);\r\n\r\n  const newAttempt = {\r\n    date: new Date().toLocaleString(),\r\n    score: score,\r\n  };\r\n\r\n  store.add(newAttempt);\r\n  return new Promise((resolve, reject) => {\r\n    transaction.oncomplete = () => resolve(\"Quiz attempt saved.\");\r\n    transaction.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n\r\n// Fetch all quiz attempts from IndexedDB\r\nexport const getQuizHistory = async () => {\r\n  const db = await openDB();\r\n  const transaction = db.transaction(STORE_NAME, \"readonly\");\r\n  const store = transaction.objectStore(STORE_NAME);\r\n  return new Promise((resolve, reject) => {\r\n    const request = store.getAll();\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,cAAc;AAC9B,MAAMC,UAAU,GAAG,aAAa;AAChC,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACT,OAAO,EAAEE,UAAU,CAAC;IAEnDK,OAAO,CAACG,eAAe,GAAIC,KAAK,IAAK;MACnC,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;MAC9B,IAAI,CAACF,EAAE,CAACG,gBAAgB,CAACC,QAAQ,CAACf,UAAU,CAAC,EAAE;QAC7CW,EAAE,CAACK,iBAAiB,CAAChB,UAAU,EAAE;UAAEiB,OAAO,EAAE,IAAI;UAAEC,aAAa,EAAE;QAAK,CAAC,CAAC;MAC1E;IACF,CAAC;IAEDZ,OAAO,CAACa,SAAS,GAAIT,KAAK,IAAKN,OAAO,CAACM,KAAK,CAACE,MAAM,CAACC,MAAM,CAAC;IAC3DP,OAAO,CAACc,OAAO,GAAIV,KAAK,IAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,KAAK,IAAK;EAC9C,MAAMZ,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,MAAMsB,WAAW,GAAGb,EAAE,CAACa,WAAW,CAACxB,UAAU,EAAE,WAAW,CAAC;EAC3D,MAAMyB,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC1B,UAAU,CAAC;EAEjD,MAAM2B,UAAU,GAAG;IACjBC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;IACjCP,KAAK,EAAEA;EACT,CAAC;EAEDE,KAAK,CAACM,GAAG,CAACJ,UAAU,CAAC;EACrB,OAAO,IAAIxB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCmB,WAAW,CAACQ,UAAU,GAAG,MAAM5B,OAAO,CAAC,qBAAqB,CAAC;IAC7DoB,WAAW,CAACJ,OAAO,GAAIV,KAAK,IAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC;EAC7D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMtB,EAAE,GAAG,MAAMT,MAAM,CAAC,CAAC;EACzB,MAAMsB,WAAW,GAAGb,EAAE,CAACa,WAAW,CAACxB,UAAU,EAAE,UAAU,CAAC;EAC1D,MAAMyB,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC1B,UAAU,CAAC;EACjD,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,OAAO,GAAGmB,KAAK,CAACS,MAAM,CAAC,CAAC;IAC9B5B,OAAO,CAACa,SAAS,GAAG,MAAMf,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC;IACjDP,OAAO,CAACc,OAAO,GAAIV,KAAK,IAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}