{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import Timer from\"../components/Timer\";import Scoreboard from\"../components/Scoreboard\";import questions from\"../components/Question\";import\"./QuizPage.css\";import{saveQuizAttempt,getQuizHistory}from\"../utils/IndexedDB\";// ✅ Import getQuizHistory\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QuizPage=()=>{const[showInstructions,setShowInstructions]=useState(true);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[userAnswers,setUserAnswers]=useState({});const[quizCompleted,setQuizCompleted]=useState(false);const[score,setScore]=useState(0);const[timeLeft,setTimeLeft]=useState(30);const[selectedAnswer,setSelectedAnswer]=useState(\"\");const[attempts,setAttempts]=useState([]);const[showScore,setShowScore]=useState(false);// ✅ Fetch quiz history on component mount\nuseEffect(()=>{const fetchAttempts=async()=>{const history=await getQuizHistory();// ✅ Fetch from IndexedDB\nsetAttempts(history);};fetchAttempts();},[]);useEffect(()=>{if(showInstructions||quizCompleted)return;const timer=setInterval(()=>{setTimeLeft(prevTime=>{if(prevTime===1){clearInterval(timer);nextQuestion();return 0;}return prevTime-1;});},1000);return()=>clearInterval(timer);},[showInstructions,quizCompleted,currentQuestionIndex]);const handleStartQuiz=()=>{setShowInstructions(false);setCurrentQuestionIndex(0);setTimeLeft(30);};const handleAnswerSelect=answer=>{setSelectedAnswer(answer);};const handleSubmitAnswer=()=>{if(!selectedAnswer)return;const currentQuestion=questions[currentQuestionIndex];if(currentQuestion.type===\"multiple-choice\"){setUserAnswers(prevAnswers=>({...prevAnswers,[currentQuestionIndex]:selectedAnswer}));if(selectedAnswer===currentQuestion.correct){setScore(prevScore=>prevScore+1);}}else if(currentQuestion.type===\"integer\"){if(parseInt(selectedAnswer)===currentQuestion.correct){setScore(prevScore=>prevScore+1);}setUserAnswers(prevAnswers=>({...prevAnswers,[currentQuestionIndex]:parseInt(selectedAnswer)}));}nextQuestion();};const nextQuestion=()=>{if(currentQuestionIndex<questions.length-1){setCurrentQuestionIndex(prevIndex=>prevIndex+1);setTimeLeft(30);setSelectedAnswer(\"\");}else{handleFinishQuiz();}};const handleFinishQuiz=async()=>{const finalScore=score;// ✅ Keeps latest score\ntry{await saveQuizAttempt(finalScore);// ✅ Saves to IndexedDB\nsetAttempts(prevAttempts=>[{date:new Date().toLocaleString(),score:finalScore},...prevAttempts]);setQuizCompleted(true);setShowScore(true);}catch(error){console.error(\"Failed to save quiz attempt:\",error);}};return/*#__PURE__*/_jsx(\"div\",{className:\"quiz-container\",children:showInstructions?/*#__PURE__*/_jsxs(\"div\",{className:\"instructions\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Instructions\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Select the best answer for each question.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"For integer-type questions, enter a numerical answer.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"You have 30 seconds per question.\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStartQuiz,children:\"Start Quiz\"})]}):showScore?/*#__PURE__*/_jsx(Scoreboard,{attempts:attempts}):/*#__PURE__*/_jsxs(\"div\",{className:\"question-section\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Question \",currentQuestionIndex+1]}),/*#__PURE__*/_jsx(\"p\",{children:questions[currentQuestionIndex].question}),questions[currentQuestionIndex].type===\"multiple-choice\"?/*#__PURE__*/_jsx(\"ul\",{className:\"options-list\",children:questions[currentQuestionIndex].options.map((option,index)=>/*#__PURE__*/_jsx(\"li\",{className:\"option-item\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"answer\",value:option,checked:selectedAnswer===option,onChange:()=>handleAnswerSelect(option)}),option]})},index))}):/*#__PURE__*/_jsx(\"input\",{type:\"number\",className:\"integer-input\",value:selectedAnswer,onChange:e=>setSelectedAnswer(e.target.value)}),/*#__PURE__*/_jsx(Timer,{timeLeft:timeLeft}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmitAnswer,disabled:!selectedAnswer,className:\"next-button\",children:\"Next\"})]})});};export default QuizPage;","map":{"version":3,"names":["React","useState","useEffect","Timer","Scoreboard","questions","saveQuizAttempt","getQuizHistory","jsx","_jsx","jsxs","_jsxs","QuizPage","showInstructions","setShowInstructions","currentQuestionIndex","setCurrentQuestionIndex","userAnswers","setUserAnswers","quizCompleted","setQuizCompleted","score","setScore","timeLeft","setTimeLeft","selectedAnswer","setSelectedAnswer","attempts","setAttempts","showScore","setShowScore","fetchAttempts","history","timer","setInterval","prevTime","clearInterval","nextQuestion","handleStartQuiz","handleAnswerSelect","answer","handleSubmitAnswer","currentQuestion","type","prevAnswers","correct","prevScore","parseInt","length","prevIndex","handleFinishQuiz","finalScore","prevAttempts","date","Date","toLocaleString","error","console","className","children","onClick","question","options","map","option","index","name","value","checked","onChange","e","target","disabled"],"sources":["C:/Users/yati/OneDrive/Documents/quiz_app/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Timer from \"../components/Timer\";\r\nimport Scoreboard from \"../components/Scoreboard\";\r\nimport questions from \"../components/Question\";\r\nimport \"./QuizPage.css\";\r\nimport { saveQuizAttempt, getQuizHistory } from \"../utils/IndexedDB\"; // ✅ Import getQuizHistory\r\n\r\nconst QuizPage = () => {\r\n    const [showInstructions, setShowInstructions] = useState(true);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [userAnswers, setUserAnswers] = useState({});\r\n    const [quizCompleted, setQuizCompleted] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [timeLeft, setTimeLeft] = useState(30);\r\n    const [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n    const [attempts, setAttempts] = useState([]);\r\n    const [showScore, setShowScore] = useState(false);\r\n\r\n    // ✅ Fetch quiz history on component mount\r\n    useEffect(() => {\r\n        const fetchAttempts = async () => {\r\n            const history = await getQuizHistory(); // ✅ Fetch from IndexedDB\r\n            setAttempts(history);\r\n        };\r\n        fetchAttempts();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showInstructions || quizCompleted) return;\r\n\r\n        const timer = setInterval(() => {\r\n            setTimeLeft((prevTime) => {\r\n                if (prevTime === 1) {\r\n                    clearInterval(timer);\r\n                    nextQuestion();\r\n                    return 0;\r\n                }\r\n                return prevTime - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer);\r\n    }, [showInstructions, quizCompleted, currentQuestionIndex]);\r\n\r\n    const handleStartQuiz = () => {\r\n        setShowInstructions(false);\r\n        setCurrentQuestionIndex(0);\r\n        setTimeLeft(30);\r\n    };\r\n\r\n    const handleAnswerSelect = (answer) => {\r\n        setSelectedAnswer(answer);\r\n    };\r\n\r\n    const handleSubmitAnswer = () => {\r\n        if (!selectedAnswer) return;\r\n\r\n        const currentQuestion = questions[currentQuestionIndex];\r\n\r\n        if (currentQuestion.type === \"multiple-choice\") {\r\n            setUserAnswers((prevAnswers) => ({\r\n                ...prevAnswers,\r\n                [currentQuestionIndex]: selectedAnswer\r\n            }));\r\n\r\n            if (selectedAnswer === currentQuestion.correct) {\r\n                setScore((prevScore) => prevScore + 1);\r\n            }\r\n        } else if (currentQuestion.type === \"integer\") {\r\n            if (parseInt(selectedAnswer) === currentQuestion.correct) {\r\n                setScore((prevScore) => prevScore + 1);\r\n            }\r\n            setUserAnswers((prevAnswers) => ({\r\n                ...prevAnswers,\r\n                [currentQuestionIndex]: parseInt(selectedAnswer)\r\n            }));\r\n        }\r\n\r\n        nextQuestion();\r\n    };\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n            setTimeLeft(30);\r\n            setSelectedAnswer(\"\");\r\n        } else {\r\n            handleFinishQuiz();\r\n        }\r\n    };\r\n\r\n    const handleFinishQuiz = async () => {  \r\n        const finalScore = score; // ✅ Keeps latest score\r\n\r\n        try {\r\n            await saveQuizAttempt(finalScore); // ✅ Saves to IndexedDB\r\n            setAttempts((prevAttempts) => [\r\n                { date: new Date().toLocaleString(), score: finalScore },\r\n                ...prevAttempts\r\n            ]);\r\n            setQuizCompleted(true);\r\n            setShowScore(true);\r\n        } catch (error) {\r\n            console.error(\"Failed to save quiz attempt:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            {showInstructions ? (\r\n                <div className=\"instructions\">\r\n                    <h2>Instructions</h2>\r\n                    <ul>\r\n                        <li>Select the best answer for each question.</li>\r\n                        <li>For integer-type questions, enter a numerical answer.</li>\r\n                        <li>You have 30 seconds per question.</li>\r\n                    </ul>\r\n                    <button onClick={handleStartQuiz}>Start Quiz</button>\r\n                </div>\r\n            ) : showScore ? (\r\n                <Scoreboard attempts={attempts} />\r\n            ) : (\r\n                <div className=\"question-section\">\r\n                    <h3>Question {currentQuestionIndex + 1}</h3>\r\n                    <p>{questions[currentQuestionIndex].question}</p>\r\n\r\n                    {questions[currentQuestionIndex].type === \"multiple-choice\" ? (\r\n                        <ul className=\"options-list\">\r\n                            {questions[currentQuestionIndex].options.map((option, index) => (\r\n                                <li key={index} className=\"option-item\">\r\n                                    <label>\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            name=\"answer\"\r\n                                            value={option}\r\n                                            checked={selectedAnswer === option}\r\n                                            onChange={() => handleAnswerSelect(option)}\r\n                                        />\r\n                                        {option}\r\n                                    </label>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"integer-input\"\r\n                            value={selectedAnswer}\r\n                            onChange={(e) => setSelectedAnswer(e.target.value)}\r\n                        />\r\n                    )}\r\n\r\n                    <Timer timeLeft={timeLeft} />\r\n                    <button onClick={handleSubmitAnswer} disabled={!selectedAnswer} className=\"next-button\">\r\n                        Next\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}