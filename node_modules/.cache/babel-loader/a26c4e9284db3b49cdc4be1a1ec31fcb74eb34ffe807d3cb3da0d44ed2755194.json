{"ast":null,"code":"const DB_NAME=\"QuizDatabase\";const STORE_NAME=\"quizHistory\";const DB_VERSION=1;// Open (or create) the IndexedDB database\nconst openDB=()=>{return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onupgradeneeded=event=>{const db=event.target.result;if(!db.objectStoreNames.contains(STORE_NAME)){db.createObjectStore(STORE_NAME,{keyPath:\"id\",autoIncrement:true});}};request.onsuccess=event=>resolve(event.target.result);request.onerror=event=>reject(event.target.error);});};// Save a quiz attempt in IndexedDB\nexport const saveQuizAttempt=async score=>{const db=await openDB();const transaction=db.transaction(STORE_NAME,\"readwrite\");const store=transaction.objectStore(STORE_NAME);const newAttempt={date:new Date().toLocaleString(),score:score};store.add(newAttempt);return new Promise((resolve,reject)=>{transaction.oncomplete=()=>resolve(\"Quiz attempt saved.\");transaction.onerror=event=>reject(event.target.error);});};// Fetch all quiz attempts from IndexedDB\nexport const getQuizHistory=async()=>{const db=await openDB();const transaction=db.transaction(STORE_NAME,\"readonly\");const store=transaction.objectStore(STORE_NAME);return new Promise((resolve,reject)=>{const request=store.getAll();request.onsuccess=()=>resolve(request.result);request.onerror=event=>reject(event.target.error);});};","map":{"version":3,"names":["DB_NAME","STORE_NAME","DB_VERSION","openDB","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","onerror","error","saveQuizAttempt","score","transaction","store","objectStore","newAttempt","date","Date","toLocaleString","add","oncomplete","getQuizHistory","getAll"],"sources":["C:/Users/yati/OneDrive/Documents/quiz_app/src/utils/IndexedDB.js"],"sourcesContent":["const DB_NAME = \"QuizDatabase\";\r\nconst STORE_NAME = \"quizHistory\";\r\nconst DB_VERSION = 1;\r\n\r\n// Open (or create) the IndexedDB database\r\nconst openDB = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\", autoIncrement: true });\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event) => resolve(event.target.result);\r\n    request.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n\r\n// Save a quiz attempt in IndexedDB\r\nexport const saveQuizAttempt = async (score) => {\r\n  const db = await openDB();\r\n  const transaction = db.transaction(STORE_NAME, \"readwrite\");\r\n  const store = transaction.objectStore(STORE_NAME);\r\n\r\n  const newAttempt = {\r\n    date: new Date().toLocaleString(),\r\n    score: score,\r\n  };\r\n\r\n  store.add(newAttempt);\r\n  return new Promise((resolve, reject) => {\r\n    transaction.oncomplete = () => resolve(\"Quiz attempt saved.\");\r\n    transaction.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n\r\n// Fetch all quiz attempts from IndexedDB\r\nexport const getQuizHistory = async () => {\r\n  const db = await openDB();\r\n  const transaction = db.transaction(STORE_NAME, \"readonly\");\r\n  const store = transaction.objectStore(STORE_NAME);\r\n  return new Promise((resolve, reject) => {\r\n    const request = store.getAll();\r\n    request.onsuccess = () => resolve(request.result);\r\n    request.onerror = (event) => reject(event.target.error);\r\n  });\r\n};\r\n"],"mappings":"AAAA,KAAM,CAAAA,OAAO,CAAG,cAAc,CAC9B,KAAM,CAAAC,UAAU,CAAG,aAAa,CAChC,KAAM,CAAAC,UAAU,CAAG,CAAC,CAEpB;AACA,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAM,CACnB,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,OAAO,CAAGC,SAAS,CAACC,IAAI,CAACT,OAAO,CAAEE,UAAU,CAAC,CAEnDK,OAAO,CAACG,eAAe,CAAIC,KAAK,EAAK,CACnC,KAAM,CAAAC,EAAE,CAAGD,KAAK,CAACE,MAAM,CAACC,MAAM,CAC9B,GAAI,CAACF,EAAE,CAACG,gBAAgB,CAACC,QAAQ,CAACf,UAAU,CAAC,CAAE,CAC7CW,EAAE,CAACK,iBAAiB,CAAChB,UAAU,CAAE,CAAEiB,OAAO,CAAE,IAAI,CAAEC,aAAa,CAAE,IAAK,CAAC,CAAC,CAC1E,CACF,CAAC,CAEDZ,OAAO,CAACa,SAAS,CAAIT,KAAK,EAAKN,OAAO,CAACM,KAAK,CAACE,MAAM,CAACC,MAAM,CAAC,CAC3DP,OAAO,CAACc,OAAO,CAAIV,KAAK,EAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC,CACzD,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAO,CAAAC,KAAK,EAAK,CAC9C,KAAM,CAAAZ,EAAE,CAAG,KAAM,CAAAT,MAAM,CAAC,CAAC,CACzB,KAAM,CAAAsB,WAAW,CAAGb,EAAE,CAACa,WAAW,CAACxB,UAAU,CAAE,WAAW,CAAC,CAC3D,KAAM,CAAAyB,KAAK,CAAGD,WAAW,CAACE,WAAW,CAAC1B,UAAU,CAAC,CAEjD,KAAM,CAAA2B,UAAU,CAAG,CACjBC,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,CACjCP,KAAK,CAAEA,KACT,CAAC,CAEDE,KAAK,CAACM,GAAG,CAACJ,UAAU,CAAC,CACrB,MAAO,IAAI,CAAAxB,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCmB,WAAW,CAACQ,UAAU,CAAG,IAAM5B,OAAO,CAAC,qBAAqB,CAAC,CAC7DoB,WAAW,CAACJ,OAAO,CAAIV,KAAK,EAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC,CAC7D,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,KAAM,CAAAtB,EAAE,CAAG,KAAM,CAAAT,MAAM,CAAC,CAAC,CACzB,KAAM,CAAAsB,WAAW,CAAGb,EAAE,CAACa,WAAW,CAACxB,UAAU,CAAE,UAAU,CAAC,CAC1D,KAAM,CAAAyB,KAAK,CAAGD,WAAW,CAACE,WAAW,CAAC1B,UAAU,CAAC,CACjD,MAAO,IAAI,CAAAG,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,KAAM,CAAAC,OAAO,CAAGmB,KAAK,CAACS,MAAM,CAAC,CAAC,CAC9B5B,OAAO,CAACa,SAAS,CAAG,IAAMf,OAAO,CAACE,OAAO,CAACO,MAAM,CAAC,CACjDP,OAAO,CAACc,OAAO,CAAIV,KAAK,EAAKL,MAAM,CAACK,KAAK,CAACE,MAAM,CAACS,KAAK,CAAC,CACzD,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}